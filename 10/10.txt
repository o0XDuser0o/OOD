1.
ให้น้องๆเขียน Binary Search โดยใช้ Recursive เพื่อหาว่ามีค่านั้นอยู่ใน list หรือไม่ ถ้าหากมีให้ตอบ True หากไม่มีให้ตอบ False

***** อธิบาย Input
1. ด้านซ้าย  จะเป็น list ของ Data
2. ด้านขวา   จะเป็นค่าที่เราต้องการจะหา
def bi_search(l, r, arr, x):
    # Code Here

inp = input('Enter Input : ').split('/')
arr, k = list(map(int, inp[0].split())), int(inp[1])
print(bi_search(0, len(arr) - 1, sorted(arr), k))
test case:
Enter Input : 33 2 11 82 77 28 15 76 9 64/28
True

2.
แสดงค่าจำนวนตัวเลขมากที่สุด ที่สามารถเรียงจากน้อยไปมากได้โดยไม่สลับตำแหน่ง
test case:
Data : 9 26 22 75 47
1 : [9]
2 : [9, 26]
3 : [9, 22]
4 : [9, 22, 75]
5 : [9, 22, 47]
longest increasing subsequence : 3

3.
หาค่า Simple-square-root ของจำนวนเต็มบวก x  โดย simple-sqrt คือ จำนวนเต็มที่เมื่อยกกำลังแล้ว จะมีค่าใกล้เคียงหรือเท่ากับ x มากที่สุด
ห้ามใช้ฟังก์ชันช่วยในการหาค่า เช่น sqrt(x), pow(x,0.5) เป็นต้น ให้ใช้ binary-search 

Example 1:
Input:
Enter input: 4
Output:
Simple sqrt: 2

-----------------------------
Example 2:
Input:
Enter input: 8
Output:
Simple sqrt: 2

อธิบาย Example 2:
sqrt(8) = 2.82842...
ดังนั้น ค่าที่ยกกำลังแล้วและเป็นจำนวนเต็ม ที่ใกล้กับ 8 คือ 2
test case:
simple sqrt: 4
2

4.
วันนี้เป็นวันเกิดพี่ฟง (3 ต.ค.) ดังนั้นพี่จึงจะแจกของขวัญให้น้องๆ
ถ้ากำหนดให้ชื่อน้องๆและชื่อของขวัญแทนด้วยตัวอักษร 1 ตัว
ช่วยหาว่าพี่ฟงจะสามารถให้ของขวัญน้องๆคนละชิ้นโดยที่ไม้ให้ของซ้ำกันได้หรือไม่
รูปแบบ input: str1,str2
Expected Complexity: O(n)
ห้ามใช้ dict set อยากใช้ทำเอง
ตัวอย่าง
รายชื่อน้อง (str1): ACAB
รายชื่อของ (str2): XCXY
เป็น Isomorphic เพราะ A -> X, C -> C, B -> Y
ตัวอย่าง 2
str1: ABAB
str2: XCXY
ไม่เป็น Isomorphic เพราะ A -> X แต่ B -> C และ B -> Y
ตัวอย่าง 3
str1: ACAB
str2: XCXC
ไม่เป็น Isomorphic เพราะ A -> X แต่ C -> C และ B -> C
test case:
Enter str1,str2: ACAB,XCXY
ACAB and XCXY are Isomorphic

5.
มีสินค้าอยู่ n ชิ้น โดยชิ้นที่ i (0 <= i < n) มีน้ำหนัก Wi กิโลกรัม  นำสินค้าบรรจุใส่กล่องไม่เกิน k ใบ โดยมีเงื่อนไขว่า
1. สิ่งของต้องมีน้ำหนักรวมกันไม่เกินน้ำหนักมากสุดที่กล่องรับไหว
2. หากสิ่งของชิ้นที่ a และชิ้นที่ b อยู่ในกล่องเดียวกัน (a <= b) สิ่งของทุกชิ้นที่อยู่ระหว่างสองชิ้นนี้ (ทุกชิ้นที่ i ที่ a < i < b) จะต้องอยู่ในกล่องนี้ด้วย 
(นั่นคือสิ่งที่ของในกล่องเดียวกันจะต้องเป็นสิ่งของที่ตำแหน่งติดกัน)
ถ้าทุกกล่องสามารถรับน้ำหนักได้เท่ากัน จงหาว่าเราสามารถใช้กล่องที่รับน้ำหนักได้น้อยสุดเท่าใด โดยที่ยังบรรจุของตามเงื่อนไขได้ และใช้กล่องครบทุกใบ

อธิบาย Input
แบ่ง Data เป็น 2 ชุดด้วย /
    -   ด้านซ้ายหมายถึง สินค้า n ชิ้น และแต่ละชิ้นมีน้ำหนัก W กิโลกรัม
    -   ด้านขวาหมายถึง จำนวนกล่อง k ใบ

คำใบ้  Optimization Problem


อธิบาย Test Case #1

มีสินค้าอยู่ 5 ชิ้น โดยมีน้ำหนักเป็น 6 2 4 3 7 ตามลำดับ และมีกล่องจำนวน 3 ใบ   และน้ำหนักที่น้อยที่สุดที่สามารถใส่สินค้าได้ครบทุกชิ้น 
และใส่ลงกล่องได้ทุกใบคือ 8 กิโลกรัม โดยในกล่องที่ 1 จะใส่สินค้า 2 ชิ้นที่มีน้ำหนัก 6 และ 2   กล่องใบที่ 2 จะใส่สินค้า 2 ชิ้นที่มำน้ำหนัก 4 และ 3  
และกล่องใบที่ 3 จะใส่สินค้า 1 ชิ้นที่มีน้ำหนัก 7

อธิบาย Test Case #2

มีสินค้าอยู่ 10 ชิ้น โดยมีน้ำหนักเป็น 8 7 2 5 1 10 9 2 3 5 ตามลำดับ และมีกล่องจำนวน 5 ใบ   และน้ำหนักที่น้อยที่สุดที่สามารถใส่สินค้าได้ครบทุกชิ้น 
และใส่ลงกล่องได้ทุกใบคือ 14 กิโลกรัม โดยในกล่องที่ 1 จะใส่สินค้า 1 ชิ้นที่มีน้ำหนัก 8   กล่องใบที่ 2 จะใส่สินค้า 3 ชิ้นที่มีน้ำหนัก 7 2 และ 5   
กล่องใบที่ 3 จะใส่สินค้า 2 ชิ้นที่มีน้ำหนัก 1 และ 10   กล่องใบที่ 4 จะใส่สินค้า 3 ชิ้นที่มีน้ำหนัก 9 2 และ 3    และกล่องใบที่ 5 จะใส่สินค้า 1 ชิ้นที่มีน้ำหนัก 5
test case:
Enter Input : 8 7 2 5 1 10 9 2 3 5/5
Minimum weigth for 5 box(es) = 14